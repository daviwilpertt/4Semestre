testes funcionais: 
	-regressão: garante que mudanças recentes não causem erro no software que já funcionava
	-integração: verifica a interação entre módulos ou componentes do sistema
	-aceitação: confirma que o sistema está pronto para uso final

testes não funcionais:
	-desempenho:	
		-carga: como o sistema se comporta em condições extremas
		-estresse: sobrecarrega o sistema para achar o ponto de falha
		-capacidade: determina a capacidade máxima de usuários ou requisições que o sistema pode suportar
		-escalabilidade: testa a capacidade do sistema crescer em tamanho ou complexidade sem atrapalhar o desempenho

	-seguranca:
		-penetração: imular ataques reais para identificar vunerabilidades
		-vulnerabilidade: identifica e classifica vulnerabilidades já conhecidas
		-autentificação e autorização: garantir que apenas usuários autorizados tenho acesso a recursos específicos


nivéis de testes:
	-interface: comunicação entre front-end e back-end
	-integração: verificam funcionalidades de forma isolada
	-unidade: retorno do código deve acontecer como o esperado


tipos de testes:
	-caixa branca: sei o código, entrada e saída
	-caixa preta: não sei o código, apenas entrada e saída
	-caixa cinza: sei parte do código

10/03

TDD | test-driven development:
	-faz o teste antes do código, de forma rápida
	-primeiro escreve os testes, depois escreve os códigos de acordo com os teste, a fim de verificar e passar dos testes
	

BDD | behaviour-driven development:
	-entrega o código de forma "compreensível" para o cliente, melhorando a colaboração e entendimento
	-tem linguagem própria Gherkin

	palavras-chaves:
		-Cenário: facilita a visualização da problemática
		-Given: dado um determinado contexto (tem-se determinada reação);
		-When: quando ocorrer algo;
		-Then: então se espera algo.
		-And: adicionar ação
		-But: adicionar ação negativa

		-Exemplo: dada (given) uma nova promoção e (and) o usuário tiver cadastro, quando (then) ela for lançada 
		oficialmente, então (then) será enviada uma notificação a um determinado grupo.

24/03

testes automatizados:
	-execução automática dos testes
	-usa programas de automação para ver se o sistema está funcionando como esperado
	-reduz os teste manuais, aumentando eficiência e precisão
	-pode ser executado em paralelo ao sistmea ou de noite
	

hooks
	-beforeAll: executa antes de todos os testes
	-beforeEach: executa antes de cada teste
	-afterEach: executa depois de cada teste
	-afterAll: executa depois de todos os testes










‬
































